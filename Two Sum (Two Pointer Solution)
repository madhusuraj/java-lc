//LC Medium #167- Two Sum problem where input array is sorted


/*****************************TWO POINTERS O(N) SOLUTION (PRE-SORTED ARRAY) *****************************/
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 0; 
        int end = numbers.length-1;
        
        while (start < end)
        {
            if (numbers[start] + numbers[end] == target)
            {
                return new int [] {start+1, end+1};
            }
            else if (numbers[start] + numbers[end] > target)
            {
                end--; 
            }
            else 
            {
                start++; 
            }
        }
        
        return new int [] {0};
    }
}


/****************************** HASHMAP O(N) SOLUTION (UNSORTED ARRAY / REGUALR TWO SUM PROBLEM) ****************************/
class Solution {
    public int[] twoSum(int[] nums, int target)
    {   
        HashMap <Integer, Integer> hm = new HashMap <Integer, Integer> (); 
        for (int i = 0; i < nums.length; i++)
        {
            hm.put(nums[i], i); //putting element as key first to search with ease using containsKey method
        }
        for (int j = 0; j < nums.length; j++)
        {
            if (hm.containsKey(target-nums[j]) && hm.get(target-nums[j]) != j)
            {
                return new int [] {j, hm.get(target-nums[j])};
            }
        }
        return new int []{-1, 0};
    }
}

/******************************** BRUTE FORCE O(N^2) SOLUTION ************************************/
class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {    
        int [] result = new int [2];
        for (int i = 0; i<nums.length; i++)
        {
            for (int j = i+1; j< nums.length; j++)
            {
                if (i != j)
                {
                    if (nums[i] + nums[j] == target)
                    {
                        result [0] = i;
                        result [1] = j;

                    }
                }
            }

        }
        return result; 
    }
}

